@page "/login"
@inherits StackBaseComponent
@inject ServiceStackStateProvider provider
@inject ILogger<Login> logger;
@inject NavigationManager NavigationManager;

<div class="container">
    <div class="row">
        <form submit=false class=@ClassNames("col-sm-6", apiResult.IsError ? " was-validated" : "")>
            <ErrorSummary Status=@apiResult.ErrorStatus 
                          VisibleFields=@(new[]{ nameof(Authenticate.UserName), nameof(Authenticate.Password) })></ErrorSummary>
            <div class="mb-3">
                <label for="userName">Email address</label>
                <input type="email" id="userName" placeholder="Enter email" @bind-value="@Email" required
                       class=@ClassNames("form-control", apiResult.InvalidClass(nameof(Authenticate.UserName)))>
                <ErrorField Status=@apiResult.ErrorStatus Name=@nameof(Authenticate.UserName)></ErrorField>
            </div>
            <div class="mb-3">
                <label for="password">Password</label>
                <input type="password" id="password" placeholder="Password" @bind-value="@Password" required
                       class=@ClassNames("form-control", apiResult.InvalidClass(nameof(Authenticate.Password)))>
                <ErrorField Status=@apiResult.ErrorStatus Name=@nameof(Authenticate.Password)></ErrorField>
            </div>

            <button type="submit" class="mb-3 btn btn-primary" @onclick:preventDefault @onclick="LoginAsync">Login</button>
        </form>

        <div class="mt-4">
            Quick Link:
            <button class="ms-2 btn btn-secondary" @onclick='e => SetUser("admin@localhost.local", "p@55wOrd")'>admin@localhost.local</button>
        </div>
    </div>
</div>


@code {
    ApiResult<AuthenticateResponse> apiResult = new();

    string Email { get; set; } = "";
    string Password { get; set; } = "";

    void SetUser(string email, string password)
    {
        Email = email;
        Password = password;
    }

    async Task LoginAsync()
    {
        apiResult.Reset();

        if (Email.IsNullOrEmpty())
            apiResult.AddFieldError(nameof(Authenticate.UserName), "Email is required");

        if (Password.IsNullOrEmpty())
            apiResult.AddFieldError(nameof(Authenticate.Password), "Password is required");

        if (apiResult.IsError) return;

        apiResult = await provider.Login(Email, Password);

        if (apiResult.IsSuccess)
        {
            var returnUrl = NavigationManager.QueryString("return");
            if (returnUrl.IsNullOrEmpty())
                returnUrl = "/";
            NavigationManager.NavigateTo(returnUrl!, true);
        }
    }
} 