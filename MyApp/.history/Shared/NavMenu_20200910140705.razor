<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">MyApp</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </li>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
 
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected bool IsAuthenticated { get; set; }

    private string LoginUrl { get; set; }


    protected override async Task OnInitializedAsync()
    {
        LoginUrl = $"/login?return={NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}";

    }

    protected override async Task OnParametersSetAsync()
    {
        var state = await authenticationStateTask;
        IsAuthenticated = state.User.Identity.IsAuthenticated;
    } 

    private async Task LogoutAsync()
    {
        await AuthStateProvider.Logout();
    }
} 