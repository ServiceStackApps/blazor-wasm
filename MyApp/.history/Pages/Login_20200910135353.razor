@page "/login"
@inject ServiceStackStateProvider provider 
@inject ILogger<Login> logger;
@inject NavigationManager NavigationManager;

<form submit=false class="@FormClass">
  <div class="form-group">
    <label for="login">Email address</label>
    <input type="email" class="form-control" id="login" placeholder="Enter email"  @bind-value="@Email" required>
    @if(!EmailError.IsNullOrEmpty()){
    <div class="invalid-feedback">
          @EmailError
          </div>
    }
  </div>
  <div class="form-group">
    <label for="password">Password</label>
    <input type="password" class="form-control" id="password" placeholder="Password" @bind-value="@Password" required/>
    @if(!PasswordError.IsNullOrEmpty()){
      <div class="invalid-feedback">
          @PasswordError
      </div>
    }
  </div> 
    @if(!AuthenticationError.IsNullOrEmpty()){
      <div style="color:red">
          @AuthenticationError
      </div>
    }
  
  <button type="submit" class="btn btn-primary" @onclick:preventDefault  @onclick="LoginAsync">Login</button>
</form>


@code {
  private string Email { get; set; }
      private string Password { get; set; }

      private string EmailError { get; set; }

      private string PasswordError { get; set; }

      private string AuthenticationError { get; set; }

      private string FormClass { get; set; }

      private async Task LoginAsync()
      {
          try
          {
              var emailEmpty = Email.IsNullOrEmpty();
              var passwordEmpty = Password.IsNullOrEmpty();
              if (emailEmpty)
              {
                  EmailError = "Email is required";
              }
              if (passwordEmpty)
              {
                  PasswordError = "Password is required";
              }
              FormClass = "was-validated";
              if (emailEmpty || passwordEmpty) return;
              await provider.Login(Email, Password);
              Console.WriteLine("returnUrl", NavigationManager.QueryString("returnUrl"));
              if (NavigationManager.QueryString("return") is string returnUrl && !returnUrl.IsNullOrEmpty())
              {
                  returnUrl = returnUrl == ""
                  NavigationManager.NavigateTo(returnUrl, true);
              }
          }
          catch (HttpRequestException ex)
          {
              logger.LogError(ex.ToString());
              if (ex.StatusCode is HttpStatusCode code && code == HttpStatusCode.Unauthorized)
              {
                  AuthenticationError = "Not Authorized wrong credentials.";
              }
          }
          catch (Exception ex)
          {
              Console.WriteLine("Exception Type :", ex.GetType().Name);
              logger.LogDebug(ex, "login");
          }
      }
} 