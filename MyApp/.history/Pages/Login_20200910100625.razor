@page "/login"
@inject ServiceStackStateProvider provider 
@inject ILogger<Login> logger;

<form submit=false>
  <div class="form-group">
    <label for="login">Email address</label>
    <input type="email" class="form-control" id="login" placeholder="Enter email"  @bind-value="@Email">
  </div>
  <div class="form-group">
    <label for="password">Password</label>
    <input type="password" class="form-control" id="password" placeholder="Password" @bind-value="@Password"/>
  </div> 
  <button type="submit" class="btn btn-primary" @onclick:preventDefault  @onclick="LoginAsync">Login</button>
</form>


@code {
  private string Email { get; set; }
      private string Password { get; set; }

      private string EmailError { get; set; }

      private string PasswordError { get; set; }

      private string AuthenticationError { get; set; }

      private async Task LoginAsync()
      {
          try
          {
              var emailEmpty = Email.IsNullOrEmpty();
              var passwordEmpty = Password.IsNullOrEmpty();
              if (emailEmpty)
              {
                  EmailError = "Email is required";
              }
              if (passwordEmpty)
              {
                  EmailError = "Password is required";
              }
              if (emailEmpty || passwordEmpty) return;
              await provider.Login(Email, Password);
          }
          catch(HttpRequestException ex)
          {
            logger.LogError(ex.ToString());
            if(ex.StatusCode == 401){
              AuthenticationError ""
            }
          }
          catch (Exception ex)
          {            
              logger.LogDebug("Exception Type :", ex.GetType().Name);
             logger.LogDebug(ex, "login");
          }
      }
}